Paperclips: The Networked Multiplayer Game To End Them All

Features we want:

- Asynchrony. We want clients to be able to pull down all their
	involved games in the background, and for the user to be able to
	interact with them instantly. No network round trips on the user
	workflow's critical path.
- Reliability. This has a couple parts:
	- We don't want to lose games or moves serverside at all.
	- Once data has been confirmed by the server, it shouldn't be lost,
    ever.
	- Clients should store and forward their moves. They should never be
    dropped on the floor unless the device fails or if they are being
    made from an out-of-date game state. The latter doesn't happen
    much because clients won't usually be playing from multiple
    computers at once, so blackholing is a perfectly fine strategy for
    a rare occurrence. Heck, you could even error out.


CORE DATA MODEL:

Board: a game state. Has the following entries:
 - Number of paperclips
 - List of players
 - Whose turn it is
 - Winner, if any
 - Move history?
 - Board ID

Move: a move to be applied
 - Originating player ID
 - Originating board ID
 - Move description (paperclip count, 1 or 2)


RPC Methods:
- GetGames(Player): Returns the current games list for Player
- MakeMove(Board, Move):
  Makes the given move on the given board, if possible.

  Return values:
    err: if nil, everything is great
      Otherwise, returns an error. Probably something out of
			these:
			- Move is against an old board state. Client should drop the
        move and optionally notify of a conflict.
			- Move is bad. Client validation should have caught this, but a
			  "screw you, clown" from the server is appropriate here.
			- Move was not made. Client should store it and try again later.

- Poll(Player, lastUpdateTime): The server will keep a monotonically
  increasing counter of the number of state changes it has made. Each
  object will, when its state changes, be timestamped from this
  central counter. Poll() will return immediately with a list of
  Boards that have been updated after lastUpdateTime; if none are
  available, Poll() will block until one of Player's boards receives
  an update, and then send back the updates.

	Improvements over previous:

	- Multiple clients on the same Player will work fine. The client is
	  responsible for keeping track of how far back it needs to reach
	  for updates, and each client tracks it independently.

	- The time between when you download the user data and the moment
    you start the Long Poll is no longer a problem. You'll get a
    snapshot of any changes as soon as you ask for changes, and
    otherwise, you'll sit and wait for changes.

	Detailed design:

	== Counter management ==
	
	Every write operation on the server will increment a counter. This
	counter is used to timestamp each Board on the server with its last
	update time.

	Immediate-return polling is easy to implement; simply scan the set
	of Boards for this player and return immediately if any have been
	updated since the lastUpateTime.

	Long Polling requires some fancier infrastructure. We need to keep a
	list of outstanding Poll requests for each player and alert the
	player when a change happens. We need to make sure that additional
	incoming Poll requests begun while a notification is in progress get
	stored and added to the next queue.


Servers, round 1:
Game server:
- Implements the RPC methods
- Persists data in-memory (hah!)

TODO: Persistent storage, reliability engineering.